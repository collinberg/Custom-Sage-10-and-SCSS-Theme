import { __decorate, __metadata } from "tslib";
import BudCommand from '@roots/bud/cli/commands/bud';
import { dry } from '@roots/bud/cli/decorators/command.dry';
import { Command, Option } from '@roots/bud-support/clipanion';
import { bind } from '@roots/bud-support/decorators';
import { ensureDir, remove } from '@roots/bud-support/fs';
import Ink from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
/**
 * `bud clean`
 *
 * @public
 * @decorator `@dry`
 */
let BudCleanCommand = class BudCleanCommand extends BudCommand {
    constructor() {
        super(...arguments);
        this._cleanStorage = Option.Boolean(`@storage`, false, {
            description: `empty @storage`,
        });
        this._cleanOutput = Option.Boolean(`@dist`, false, {
            description: `empty @dist`,
        });
    }
    /**
     * Execute command
     *
     * @public
     * @decorator `@bind`
     */
    async execute() {
        await this.makeBud(this);
        await this.run(this);
        if (this._cleanStorage ||
            (!this._cleanStorage && !this._cleanOutput)) {
            await this.cleanStorage();
        }
        if (this._cleanOutput || (!this._cleanOutput && !this._cleanOutput)) {
            await this.cleanOutput();
        }
    }
    async cleanOutput() {
        try {
            if (this.bud.hasChildren) {
                return await Promise.all(Object.values(this.bud.children).map(async (child) => {
                    try {
                        await remove(child.path(`@dist`));
                        await this.renderOnce(React.createElement(Ink.Box, null,
                            React.createElement(Ink.Text, { color: "green" },
                                "\u2714 emptied ",
                                child.path(`@dist`))));
                    }
                    catch (error) {
                        throw error;
                    }
                }));
            }
            await remove(this.bud.path(`@dist`));
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "green" },
                    "\u2714 emptied ",
                    this.bud.path(`@dist`))));
        }
        catch (error) {
            throw error;
        }
    }
    async cleanStorage() {
        if (this.bud.hasChildren) {
            return await Promise.all(Object.values(this.bud.children).map(async (child) => {
                try {
                    await remove(child.path(`@dist`));
                    await this.renderOnce(React.createElement(Ink.Box, null,
                        React.createElement(Ink.Text, { color: "green" },
                            "\u2714 emptied ",
                            child.path(`@storage`))));
                }
                catch (error) {
                    throw error;
                }
            }));
        }
        try {
            await ensureDir(this.bud.path(`@storage`));
            await remove(this.bud.path(`@storage`));
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "green" },
                    "\u2714 emptied ",
                    this.bud.path(`@storage`))));
        }
        catch (error) {
            throw error;
        }
    }
};
BudCleanCommand.paths = [[`clean`]];
BudCleanCommand.usage = Command.Usage({
    category: `tasks`,
    description: `Clean project artifacts and caches`,
    details: `
      \`bud clean\` empties the \`@dist\` and \`@storage\` directories.
      \`bud clean @dist\` empties the \`@dist\` directory.
      \`bud clean @storage\` empties the \`@storage\` directory.
`,
    examples: [
        [`Clean artifacts/caches`, `$0 clean`],
        [`Clean dist`, `$0 clean @dist`],
        [`Clean storage`, `$0 clean @storage`],
    ],
});
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudCleanCommand.prototype, "execute", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudCleanCommand.prototype, "cleanOutput", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudCleanCommand.prototype, "cleanStorage", null);
BudCleanCommand = __decorate([
    dry
], BudCleanCommand);
export default BudCleanCommand;
//# sourceMappingURL=bud.clean.js.map