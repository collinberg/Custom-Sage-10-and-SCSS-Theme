var _a, _b;
import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import { Hooks } from '../base/base.js';
/**
 * Synchronous hooks registry
 *
 * @remarks
 * Supports sync values
 */
export class EventHooks extends Hooks {
    /**
     * Register a function to filter a value.
     *
     * @public
     * @decorator `@bind`
     */
    set(id, ...input) {
        if (!this.has(id))
            this.store[id] = [];
        input
            .map(this.app.value.make)
            .map((value) => this.store[id].push(value));
        return this.app;
    }
    /**
     * Fire actions registered to an event.
     *
     * @example
     * ```js
     * await app.hooks.fire('namespace.key')
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    async get(id) {
        if (!this.has(id))
            return this.app;
        const events = [...this.store[id]];
        this.store[id] = [];
        await events
            .map(this.app.value.get)
            .reduce(async (promise, action) => {
            await promise;
            await action(this.app);
        }, Promise.resolve());
        return this.app;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object, Function]),
    __metadata("design:returntype", Function)
], EventHooks.prototype, "set", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof T !== "undefined" && T) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], EventHooks.prototype, "get", null);
//# sourceMappingURL=event.js.map