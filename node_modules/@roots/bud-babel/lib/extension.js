import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, } from '@roots/bud-framework/extension/decorators';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
/**
 * Babel support for `@roots/bud`
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 */
let BabelExtension = class BabelExtension extends Extension {
    constructor() {
        super(...arguments);
        /**
         * Babel env
         *
         * @public
         */
        this.env = {
            development: { compact: false },
        };
        /**
         * Plugins registry
         *
         * @public
         */
        this.plugins = {};
        /**
         * Presets registry
         *
         * @public
         */
        this.presets = {};
    }
    /**
     * Babel cache directory
     *
     * @public
     */
    get cacheDirectory() {
        return this.app.cache.enabled
            ? this.app.path(this.app.cache.cacheDirectory, `babel`)
            : false;
    }
    getEnv() {
        return this.env;
    }
    setEnv(env) {
        this.env = env;
        return this;
    }
    /**
     * Root directory
     *
     * @public
     */
    get root() {
        return this.app.path();
    }
    /**
     * Loader options
     *
     * @readonly
     * @public
     */
    get loaderOptions() {
        return {
            cacheIdentifier: `babel`,
            cacheDirectory: this.cacheDirectory,
            presets: Object.values(this.presets),
            plugins: Object.values(this.plugins),
            env: this.env,
            root: this.root,
        };
    }
    /**
     * Register extension
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        try {
            const presetEnv = await this.resolve(`@babel/preset-env`, import.meta.url);
            if (presetEnv)
                this.setPreset(`@babel/preset-env`, presetEnv);
        }
        catch (error) {
            throw error;
        }
        try {
            const transformRuntime = await this.resolve(`@babel/plugin-transform-runtime`, import.meta.url);
            if (transformRuntime)
                this.setPlugin(`@babel/plugin-transform-runtime`, [
                    transformRuntime,
                    { helpers: false },
                ]);
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * `configAfter` callback
     *
     * @public
     * @decorator `@bind`
     */
    async configAfter(bud) {
        const loader = await this.resolve(`babel-loader`, import.meta.url);
        if (!loader)
            return this.logger.error(`Babel loader not found`);
        bud.build.setLoader(`babel`, loader).setItem(`babel`, {
            loader: `babel`,
            options: () => this.loaderOptions,
        });
        bud.build.rules.js.setUse((items = []) => [
            bud.build.items.babel,
            ...items,
        ]);
    }
    /**
     * Set a babel preset
     *
     * @param name - babel preset name
     * @param preset - path to the babel preset or the preset itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPreset(name, preset) {
        if (!preset) {
            this.presets[name] = [name];
            return this;
        }
        this.presets[name] = Array.isArray(preset) ? preset : [preset];
        return this;
    }
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existing registry
     *
     * @public
     * @decorator `@bind`
     */
    setPresets(presets) {
        this.presets = Object.entries(presets).reduce((presets, [name, preset]) => {
            if (Array.isArray(preset)) {
                presets[name] = preset;
                return presets;
            }
            presets[name] = [preset];
            return presets;
        }, {});
        return this;
    }
    /**
     * Remove a babel preset
     *
     * @param preset - preset name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPreset(preset) {
        if (!isUndefined(this.presets[preset]))
            this.presets[preset] = undefined;
        return this;
    }
    /**
     * Set options on a babel preset
     *
     * @param preset - preset name
     * @param options - preset options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPresetOptions(preset, options) {
        this.presets[preset] = [this.presets[preset].shift(), options];
        return this;
    }
    /**
     * Set a babel plugin
     *
     * @param name - babel plugin name
     * @param plugin - path to the babel plugin or the plugin itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPlugin(name, plugin) {
        if (!plugin && Array.isArray(name)) {
            this.plugins[name[0]] = name;
            return this;
        }
        if (!plugin && !Array.isArray(name)) {
            this.plugins[name] = [name];
            return this;
        }
        if (Array.isArray(name)) {
            throw Error(`Babel plugin name must be a string.`);
        }
        this.plugins[name] = Array.isArray(plugin) ? plugin : [plugin];
        return this;
    }
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existingplugins  registry
     *
     * @public
     * @decorator `@bind`
     */
    setPlugins(plugins) {
        this.plugins = Object.entries(plugins).reduce((plugins, [name, plugin]) => {
            if (Array.isArray(plugin)) {
                plugins[name] = plugin;
                return plugins;
            }
            plugins[name] = [plugin];
            return plugins;
        }, {});
        return this;
    }
    /**
     * Remove a babel plugin
     *
     * @param plugin - plugin name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPlugin(plugin) {
        if (!isUndefined(this.plugins[plugin]))
            this.plugins[plugin] = undefined;
        return this;
    }
    /**
     * Set options on a babel plugin
     *
     * @param plugin - plugin name
     * @param options - plugin options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPluginOptions(plugin, options) {
        this.plugins[plugin] = [this.plugins[plugin].shift(), options];
        return this;
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BabelExtension.prototype, "register", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BabelExtension.prototype, "configAfter", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPreset", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPresets", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], BabelExtension.prototype, "unsetPreset", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPresetOptions", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPlugin", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPlugins", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], BabelExtension.prototype, "unsetPlugin", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Object)
], BabelExtension.prototype, "setPluginOptions", null);
BabelExtension = __decorate([
    label(`@roots/bud-babel`),
    expose(`babel`)
], BabelExtension);
export default BabelExtension;
//# sourceMappingURL=extension.js.map