/* eslint-disable no-console */
import * as argv from '@roots/bud/context/argv';
import bud from '@roots/bud/context/bud';
import * as projectFiles from '@roots/bud/context/config';
import getEnv from '@roots/bud/context/env';
import getExtensions from '@roots/bud/context/extensions';
import getManifest from '@roots/bud/context/manifest';
import services from '@roots/bud/context/services';
import { Logger } from '@roots/bud/logger';
import { Filesystem } from '@roots/bud-support/filesystem';
import omit from '@roots/bud-support/lodash/omit';
let contexts = {};
export default async ({ basedir, ...overrides }, options = {
    cache: true,
    find: false,
}) => {
    if (!basedir)
        basedir = argv.basedir;
    if (options.cache && contexts[basedir])
        return contexts[basedir];
    const fs = new Filesystem(basedir);
    let config;
    let env;
    let extensions;
    let manifest;
    if (options.find) {
        env = getEnv({ basedir, ...overrides });
        config = await projectFiles.get({ basedir, fs });
        manifest = getManifest(config);
    }
    extensions = getExtensions(manifest, options.find);
    const logger = new Logger();
    const context = {
        label: overrides?.label ?? manifest?.name ?? bud?.label ?? `default`,
        basedir,
        // eslint-disable-next-line n/no-process-env
        bin: process.env.BUD_JS_BIN ?? `node`,
        ...overrides,
        mode: overrides?.mode ?? `production`,
        env: { ...(env ?? {}), ...(overrides?.env ?? {}) },
        config: { ...(config ?? {}), ...(overrides?.config ?? {}) },
        services: [...(services ?? []), ...(overrides?.services ?? [])],
        bud: { ...(bud ?? {}), ...(overrides?.bud ?? {}) },
        manifest: { ...(manifest ?? {}), ...(overrides?.manifest ?? {}) },
        extensions: {
            builtIn: [
                ...(extensions?.builtIn ?? []),
                ...(overrides?.extensions?.builtIn ?? []),
            ],
            discovered: [
                ...(extensions?.discovered ?? []),
                ...(overrides?.extensions?.discovered ?? []),
            ],
        },
        logger: overrides?.logger ?? logger,
    };
    context.logger.scope(context.label).debug(omit(context, `env`));
    await context.logger.setCommonPath(context.basedir);
    if (options.cache) {
        contexts[basedir] = context;
        return contexts[basedir];
    }
    return context;
};
//# sourceMappingURL=index.js.map