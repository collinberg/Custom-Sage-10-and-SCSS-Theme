import { __decorate, __metadata } from "tslib";
import { platform } from 'node:os';
import { bind } from '@roots/bud-support/decorators';
import isEmpty from '@roots/bud-support/lodash/isEmpty';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
import { NotificationCenter, } from '@roots/bud-support/node-notifier';
import { open, openEditor } from '@roots/bud-support/open';
import { notifierPath } from './notifierPath.js';
/**
 * Notifier
 */
export class Notifier {
    constructor() {
        this.notifier = new NotificationCenter({ customPath: notifierPath });
        /**
         * Track if browser has already been opened once
         * to prevent multiple browser tabs from opening
         * when changes are saved.
         *
         * When {@link Notifier.openBrowser} is called and this
         * prop is true the call exits early. Otherwise, the
         * browser is opened and this prop is set to true.
         *
         * @see {@link https://github.com/roots/bud/issues/2041}
         */
        this.browserOpened = false;
    }
    get notificationsEnabled() {
        return this.bud?.context.args.notify !== false;
    }
    get openEditorEnabled() {
        return isString(this.editor);
    }
    get openBrowserEnabled() {
        return this.browser === true || isString(this.browser);
    }
    setBrowser(name) {
        this.browser = name;
        return this;
    }
    setTitle(title) {
        this.title = title;
        return this;
    }
    setGroup(group) {
        this.group = group;
        return this;
    }
    setMessage(message) {
        this.message = isFunction(message) ? message() : message;
    }
    setUrl(url) {
        if (!url)
            return;
        this.url = url;
        return this;
    }
    setBud(bud) {
        this.bud = bud;
        return this;
    }
    setEditor(editor) {
        if (isString(editor)) {
            this.editor = editor;
            return this;
        }
        if (editor === true) {
            this.editor =
                this.bud.env.get(`VISUAL`) ?? this.bud.env.get(`EDITOR`);
            return this;
        }
        this.editor = false;
        return this;
    }
    setStats(stats) {
        this.stats = stats;
        return this;
    }
    hasStats() {
        return !isEmpty(this.stats) || !isUndefined(this.stats);
    }
    hasErrors() {
        if (!this.hasStats())
            return false;
        return this.getErrorCount() > 0;
    }
    hasWarnings() {
        if (!this.hasStats())
            return false;
        return this.getWarningCount() > 0;
    }
    getErrors() {
        return [
            ...(this.stats?.errors ?? []),
            ...(this.stats?.children ?? []).map(c => c.errors).flat(),
        ]
            .flat()
            .filter(Boolean);
    }
    getErrorCount() {
        return this.stats?.errorsCount ?? 0;
    }
    getWarnings() {
        return [
            ...(this.stats?.warnings ?? []),
            ...(this.stats?.children ?? []).map(c => c.warnings).flat(),
        ].flat();
    }
    getWarningCount() {
        return this.stats?.warningsCount ?? 0;
    }
    async compilationNotification() {
        this.bud.info(`notification center called`);
        if (!this.notificationsEnabled) {
            this.bud.info(`notification center disabled. exiting.`);
            return;
        }
        if (!this.bud?.compiler?.stats) {
            this.bud.warn(`notification center called before stats were available. exiting.`);
            return;
        }
        this.setStats(this.bud.compiler.stats);
        this.setGroup(this.bud.path());
        this.setTitle(this.bud.label);
        this.setMessage(this.hasErrors()
            ? `Compilation failed`
            : this.hasWarnings()
                ? `Compilation succeeded (with warnings)`
                : `Successfully compiled`);
        this.setEditor(this.bud.context.args.editor);
        this.setBrowser(this.bud.context.args.browser);
        this.setUrl(this.bud.server?.publicUrl.origin);
        try {
            this.openEditor(this.parseErrors(this.stats?.errors));
        }
        catch (error) { }
        try {
            await this.openBrowser(this.url);
        }
        catch (error) { }
        try {
            this.notify();
        }
        catch (error) { }
    }
    /**
     * Open browser in development
     *
     * @public
     */
    async openBrowser(url) {
        if (!this.bud.isDevelopment)
            return;
        if (!this.openBrowserEnabled)
            return;
        if (!isString(url))
            return;
        if (this.browserOpened)
            return;
        this.browserOpened = true;
        if (isString(this.browser)) {
            return await open(url, { app: { name: this.browser } });
        }
        return await open(url);
    }
    /**
     * Emit OS notification center notice
     *
     * @public
     * @decorator `@bind`
     */
    notify(notification, callback) {
        if (!this.notificationsEnabled)
            return;
        if (platform() !== `darwin`) {
            this.bud.info(`notifications only currently supported on macos`);
        }
        this.notifier.notify(notification ?? {
            title: this.title,
            message: this.message,
            group: this.group,
            open: this.url,
        }, callback ?? this.notifierCallback);
    }
    /**
     * node notifier callback
     *
     * @public
     * @decorator `@bind`
     */
    async notifierCallback(...args) {
        const [_error, response, metadata] = args;
        if (response)
            this.bud.info(`notify response`, response);
        if (metadata)
            this.bud.info(`notify metadata`, metadata);
    }
    /**
     * Open editor on error
     *
     * @public
     * @decorator `@bind`
     */
    openEditor(files) {
        if (!this.openEditorEnabled)
            return;
        if (!files || isEmpty(files))
            return;
        if (!isString(this.editor))
            return;
        files.map(file => this.bud.info(`opening editor`, this.editor, `w/ file`, file));
        return openEditor(files, { editor: this.editor });
    }
    /**
     * Parse errors from webpack stats
     *
     * @public
     * @decorator `@bind`
     */
    parseErrors(errors) {
        if (!errors || !errors.length)
            return [];
        try {
            const parseError = (error) => {
                let file;
                if (!error.moduleId)
                    return;
                const module = this.stats.children
                    ?.flatMap(child => child?.modules?.find(module => module.id === error.moduleId))
                    ?.pop();
                if (!module)
                    return;
                if (module.nameForCondition) {
                    file = module.nameForCondition;
                }
                else if (module.name) {
                    file = this.bud.path(`@src`, module.name);
                }
                if (!file)
                    return;
                return { file };
            };
            return errors?.map(parseError).filter(Boolean);
        }
        catch (error) {
            this.bud.info(`error parsing errors`, error);
            return [];
        }
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "setBrowser", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Object)
], Notifier.prototype, "setTitle", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "setGroup", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "setMessage", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Object)
], Notifier.prototype, "setUrl", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "setBud", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "setEditor", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Notifier.prototype, "setStats", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Boolean)
], Notifier.prototype, "hasStats", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Boolean)
], Notifier.prototype, "hasErrors", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Boolean)
], Notifier.prototype, "hasWarnings", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Notifier.prototype, "getErrors", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], Notifier.prototype, "getErrorCount", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Notifier.prototype, "getWarnings", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], Notifier.prototype, "getWarningCount", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Notifier.prototype, "compilationNotification", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Notifier.prototype, "openBrowser", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "notify", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Notifier.prototype, "notifierCallback", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], Notifier.prototype, "openEditor", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", Array)
], Notifier.prototype, "parseErrors", null);
//# sourceMappingURL=notifier.js.map