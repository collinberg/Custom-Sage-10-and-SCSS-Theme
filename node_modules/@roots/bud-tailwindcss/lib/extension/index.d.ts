import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { Config, ThemeConfig } from 'tailwindcss/types/config.js';
/**
 * TailwindCSS support for `@roots/bud`
 *
 * @decorator `@expose`
 * @decorator `@label`
 * @decorator `@dependsOn`
 * @decorator `@options`
 */
export declare class BudTailwindCss extends Extension<{
    generateImports: boolean | Array<string>;
}> {
    /**
     * Get config path
     */
    private get path();
    /**
     * Tailwind config (source)
     */
    private source;
    /**
     * Tailwind config (resolved)
     */
    private config;
    getConfig(): this[`config`];
    /**
     * Resolved tailwind config
     *
     * @remarks
     * ðŸš¨ Any mutations to this object will be applied to the generated tailwindcss!
     */
    private theme;
    getTheme(): this[`theme`];
    /**
     * Get config source module
     */
    getSource(): Promise<Config>;
    /**
     * Resolved paths
     */
    dependencies: {
        tailwindcss: string;
        nesting: string;
    };
    /**
     * Keys that can be imported from `@tailwind` alias
     */
    get importableKeys(): Array<string>;
    /**
     * Resolve a tailwind config value
     * @decorator `@bind`
     */
    resolveThemeValue<K extends `${keyof ThemeConfig & string}`>(key: K, extendedOnly?: boolean): Config[K];
    /**
     * Generate a static module for a tailwind theme key
     * @decorator `@bind`
     */
    makeStaticModule(key: keyof ThemeConfig): string;
    /**
     * Generate import mapping
     * @decorator `@bind`
     */
    generateImports(imports?: Array<`${keyof ThemeConfig & string}`> | boolean): Promise<this>;
    /**
     * `init` callback
     * @decorator `@bind`
     */
    init(): Promise<void>;
    /**
     * `configAfter` callback
     * @decorator `@bind`
     */
    configAfter(bud: Bud): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map