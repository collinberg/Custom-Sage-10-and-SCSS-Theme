import { __decorate, __metadata } from "tslib";
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators';
/**
 * Wepback compilation controller class
 */
export class Compiler extends Service {
    constructor() {
        super(...arguments);
        /**
         * Configuration
         * @public
         */
        this.config = [];
    }
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async compile() {
        this.implementation = await this.app.module.import(`webpack`);
        this.logger.log(`imported webpack`, this.implementation.version);
        this.config = !this.app.hasChildren
            ? [await this.app.build.make()]
            : await Promise.all(Object.values(this.app.children).map(async (child) => {
                try {
                    return await child.build.make();
                }
                catch (error) {
                    throw error;
                }
            }));
        try {
            await this.app.hooks.fire(`compiler.before`);
        }
        catch (error) {
            throw error;
        }
        if (this.app.isCLI() && this.app.context.args.dry) {
            this.logger.log(`running in dry mode. exiting early.`);
            return;
        }
        this.app.context.logger.timeEnd(`initialize`);
        this.instance = this.implementation(this.config);
        this.instance.hooks.done.tap(this.app.label, async (stats) => {
            await this.onStats(stats);
        });
        this.instance.hooks.done.tap(`${this.app.label}-close`, async () => {
            await this.app.hooks.fire(`compiler.close`);
        });
        await this.app.hooks.fire(`compiler.after`);
        return this.instance;
    }
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    async onStats(stats) {
        this.stats = stats.toJson(this.app.hooks.filter(`build.stats`));
        if (this.stats.errorsCount > 0 ||
            this.stats.children?.some(child => child.errorsCount > 0)) {
            process.exitCode = 1;
        }
        try {
            await this.app.dashboard.update(stats);
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Compiler error event
     *
     * @public
     * @decorator `@bind`
     */
    onError(error) {
        this.app.isDevelopment &&
            this.app.server.appliedMiddleware?.hot?.publish({ error });
        throw error;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Compiler.prototype, "compile", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], Compiler.prototype, "onStats", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], Compiler.prototype, "onError", null);
//# sourceMappingURL=compiler.service.js.map