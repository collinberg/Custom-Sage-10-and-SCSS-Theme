import { isInternalDevelopmentEnv } from '@roots/bud/cli/helpers/isInternalDevelopmentEnv';
import Ink from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
export const checkDependencies = async (bud) => {
    if (isInternalDevelopmentEnv(bud))
        return false;
    const mismatches = Object.entries({
        ...(bud.context.manifest?.dependencies ?? {}),
        ...(bud.context.manifest?.devDependencies ?? {}),
    })
        .filter(([name]) => name.startsWith(`@roots/`))
        .filter(([signifier, version]) => {
        version = version.replace(`^`, ``);
        return (version !== `latest` &&
            version !== `nightly` &&
            !version.includes(`workspace:`) &&
            version !== bud.context.bud.version);
    });
    mismatches?.length &&
        bud.dashboard.renderer.once(React.createElement(Ink.Box, { flexDirection: "column", marginY: 1 }, mismatches.map(([k, v], key) => {
            return (React.createElement(Ink.Box, { flexDirection: "row", key: key },
                React.createElement(Ink.Box, null,
                    React.createElement(Ink.Text, { color: "red" }, k)),
                React.createElement(Ink.Box, { flexDirection: "column", paddingLeft: 1 },
                    React.createElement(Ink.Text, null,
                        "Installed version ",
                        React.createElement(Ink.Text, { color: "blue" },
                            "(",
                            v,
                            ")"),
                        ` `,
                        "does not match bud.js version",
                        ` `,
                        React.createElement(Ink.Text, { color: "blue" },
                            "(",
                            bud.context.bud.version,
                            ")")))));
        })));
    return mismatches?.length;
};
//# sourceMappingURL=checkDependencies.js.map