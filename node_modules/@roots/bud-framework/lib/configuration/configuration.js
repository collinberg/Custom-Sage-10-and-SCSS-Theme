import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import isFunction from '@roots/bud-support/lodash/isFunction';
/**
 * User config parser
 * @public
 */
class Configuration {
    /**
     * Class constructor
     * @public
     */
    constructor(bud) {
        this.bud = bud;
    }
    /**
     * Process configuration
     *
     * @public
     * @decorator `@bind`
     */
    async run(description) {
        if (!description.module)
            return;
        return description.dynamic
            ? await this.dynamicConfig(description)
            : await this.staticConfig(description);
    }
    async dynamicConfig(description) {
        this.bud.log(`processing as dynamic configuration:`, description.name);
        const configCallable = description.module?.default ?? description.module;
        return await configCallable(this.bud);
    }
    /**
     * Process static configuration
     *
     * @public
     * @decorator `@bind`
     */
    async staticConfig(description) {
        this.bud.log(`processing as static configuration:`, description.name);
        return await Promise.all(Object.entries(description.module).map(async ([key, value]) => {
            const request = this.bud[key];
            if (isFunction(request))
                await request(value);
        }));
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Configuration.prototype, "run", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Configuration.prototype, "dynamicConfig", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Configuration.prototype, "staticConfig", null);
export default Configuration;
//# sourceMappingURL=configuration.js.map