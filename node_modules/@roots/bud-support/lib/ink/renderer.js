import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import Ink from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
export class Renderer {
    constructor(stdout) {
        this.stdout = stdout;
    }
    async cleanup() {
        this.instance?.cleanup();
        this.instance?.unmount();
    }
    async once(Element) {
        try {
            this.instance = Ink.render(React.createElement(Ink.Static, { items: [Element] }, (Item, i) => React.createElement(Ink.Box, { key: i }, Item)), { stdout: this.stdout });
            await this.cleanup();
        }
        catch (error) {
            return this.instance;
        }
    }
    async text(text) {
        try {
            this.render(React.createElement(Ink.Text, null, text));
            return this.instance;
        }
        catch (error) {
            return this.instance;
        }
    }
    async render(Element) {
        try {
            if (this.instance) {
                this.instance.rerender(Element);
            }
            else {
                this.instance = Ink.render(Element, { stdout: this.stdout });
            }
            return this.instance;
        }
        catch (error) {
            return this.instance;
        }
    }
    getInstance() {
        return this.instance;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Renderer.prototype, "cleanup", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Renderer.prototype, "once", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Renderer.prototype, "text", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Renderer.prototype, "render", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Renderer.prototype, "getInstance", null);
//# sourceMappingURL=renderer.js.map