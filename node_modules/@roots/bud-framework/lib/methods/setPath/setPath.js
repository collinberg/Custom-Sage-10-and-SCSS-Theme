import { normalize } from 'node:path';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
/**
 * Set a {@link Locations} value
 *
 * @remarks
 * All values should be relative to the project directory.
 *
 * @example
 * Set project path
 * ```js
 * bud.setPath('/app/absolute/path/')
 * ```
 *
 * @example
 * ```js
 * bud.setPath('@src', 'custom/src')
 * ```
 *
 * @param arg1 - path handler
 * @param arg2 - path value
 */
export const setPath = function (...parameters) {
    const [arg1, arg2] = parameters;
    if (isString(arg1) && isUndefined(arg2)) {
        Object.assign(this.context, { basedir: normalize(arg1) });
        return this;
    }
    Object.entries(isString(arg1) ? { [arg1]: arg2 } : arg1).map(([key, value]) => {
        if (!key.startsWith(`@`)) {
            throw new Error(`bud path keys should start with \`@\`. Please change \`${key}\` to \`@${key}\``);
        }
        const absolutePath = this.path(value);
        if (!absolutePath.startsWith(`/`))
            throw new Error(`the final result of a bud.setPath transform was not absolute: ${key} => ${value} => ${absolutePath}`);
        this.hooks.on(`location.${key}`, this.path(value));
        this.log(`${key} set to ${value}`);
    });
    return this;
};
//# sourceMappingURL=setPath.js.map