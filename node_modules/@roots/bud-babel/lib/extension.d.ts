import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { LoaderOptions, Registry } from './types.js';
/**
 * Babel support for `@roots/bud`
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 */
export default class BabelExtension extends Extension {
    /**
     * Babel cache directory
     *
     * @public
     */
    get cacheDirectory(): LoaderOptions[`cacheDirectory`];
    /**
     * Babel env
     *
     * @public
     */
    env: LoaderOptions[`env`];
    getEnv(): LoaderOptions[`env`];
    setEnv(env: LoaderOptions[`env`]): this;
    /**
     * Plugins registry
     *
     * @public
     */
    plugins: Registry;
    /**
     * Presets registry
     *
     * @public
     */
    presets: Registry;
    /**
     * Root directory
     *
     * @public
     */
    get root(): string;
    /**
     * Loader options
     *
     * @readonly
     * @public
     */
    get loaderOptions(): LoaderOptions;
    /**
     * Register extension
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * `configAfter` callback
     *
     * @public
     * @decorator `@bind`
     */
    configAfter(bud: Bud): Promise<void>;
    /**
     * Set a babel preset
     *
     * @param name - babel preset name
     * @param preset - path to the babel preset or the preset itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPreset(name: string, preset?: [string, any] | string): this;
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existing registry
     *
     * @public
     * @decorator `@bind`
     */
    setPresets(presets: {
        [key: string]: [string, any] | string;
    }): this;
    /**
     * Remove a babel preset
     *
     * @param preset - preset name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPreset(preset: string): this;
    /**
     * Set options on a babel preset
     *
     * @param preset - preset name
     * @param options - preset options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPresetOptions(preset: string, options: any): this;
    /**
     * Set a babel plugin
     *
     * @param name - babel plugin name
     * @param plugin - path to the babel plugin or the plugin itself
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPlugin(name: string | [any, any], plugin?: [any, any] | string): this;
    /**
     * Set babel presets
     *
     * @remarks
     * Completely overrides existingplugins  registry
     *
     * @public
     * @decorator `@bind`
     */
    setPlugins(plugins: {
        [key: string]: [any, any] | string;
    }): this;
    /**
     * Remove a babel plugin
     *
     * @param plugin - plugin name
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    unsetPlugin(plugin: string): this;
    /**
     * Set options on a babel plugin
     *
     * @param plugin - plugin name
     * @param options - plugin options
     * @returns The babel configuration class
     *
     * @public
     * @decorator `@bind`
     */
    setPluginOptions(plugin: string, options: any): this;
}
//# sourceMappingURL=extension.d.ts.map