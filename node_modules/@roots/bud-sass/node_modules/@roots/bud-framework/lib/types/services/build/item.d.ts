import type { Bud } from '../../../bud.js';
import type { Loaders } from '../../../index.js';
import type { Base } from './base.js';
import type { Loader } from './loader.js';
/**
 * Item interface
 */
export interface Item extends Base {
    _app: () => Bud;
    app: Bud;
    /**
     * Identifier
     *
     * @public
     */
    ident: string;
    /**
     * Key from {@link Loaders} registry
     *
     * @public
     */
    loader: `${keyof Loaders & string}` | Loader;
    /**
     * Set the {@link Loaders} key
     *
     * @public
     */
    setLoader(loader: `${keyof Loaders & string}` | Loader): this;
    /**
     * Get the associated {@link Loader} instance
     *
     * @public
     */
    getLoader(): Loader;
    /**
     * Set the {@link Loaders} key
     *
     * @public
     */
    setIdent(ident: string): this;
    /**
     * Get the associated {@link Ident} instance
     *
     * @public
     */
    getIdent(): string;
    /**
     * Associated {@link Loader} options
     *
     * @public
     */
    options: Item.Options | ((app: Partial<Bud>) => Item.Options);
    /**
     * Set {@link Item.Options}
     *
     * @public
     */
    setOptions(factory: Item.Options | ((app: Bud) => Item.Options)): this;
    /**
     * Get associated {@link Loader} options
     *
     * @public
     */
    getOptions(): Item.Options;
    /**
     * Merge option
     *
     * @param options - Item.Options to merge
     * @returns void
     *
     * @public
     */
    mergeOptions(options: Item.Options): this;
    /**
     * Makes final Item output
     *
     * @public
     */
    toWebpack(): Item.Output;
}
export declare namespace Item {
    /**
     * Item.Options interface
     *
     * @public
     */
    interface Options {
        [key: string]: any;
    }
    /**
     * Constructor interface
     *
     * @public
     */
    type ConstructorOptions = {
        loader?: Item['loader'];
        options?: Item.Options;
    };
    /**
     * Output interface
     *
     * @public
     */
    interface Output {
        /**
         * Unique loader options identifier.
         */
        ident?: string;
        /**
         * Loader name.
         */
        loader?: string;
        /**
         * Loader options.
         */
        options?: string | {
            [index: string]: any;
        };
    }
}
//# sourceMappingURL=item.d.ts.map