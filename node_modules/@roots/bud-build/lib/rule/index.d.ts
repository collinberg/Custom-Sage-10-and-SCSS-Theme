import type { Bud, Items } from '@roots/bud-framework';
import type { Options, Output, Parser, Rule as Interface } from '@roots/bud-framework/services/build/rule';
import type { Item } from '../item/index.js';
import Base from '../shared/base.js';
export { Interface, Options, Output, Parser };
/**
 * Bud Rule
 */
declare class Rule extends Base implements Interface {
    /**
     * @public
     */
    test: Options['test'];
    /**
     * @public
     */
    use?: Options[`use`];
    /**
     * @public
     */
    include?: Options['include'];
    /**
     * @public
     */
    exclude?: Options['exclude'];
    /**
     * @public
     */
    type?: Interface['type'];
    /**
     * @public
     */
    resourceQuery?: Interface['resourceQuery'];
    /**
     * @public
     */
    parser?: Interface['parser'];
    /**
     * Generator factory
     *
     * @public
     */
    generator?: Interface['generator'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Bud, options?: Options);
    /**
     * Test value
     *
     * @param app - Bud instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest(): Output['test'];
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test: Options['test']): this;
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser(): Output['parser'];
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser: Interface['parser']): this;
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse(): Array<`${keyof Items & string}` | Item>;
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(use: Options[`use`] | ((use: Options[`use`]) => Options[`use`])): this;
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude(): Array<string | RegExp>;
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(includes: Options['include']): this;
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getResourceQuery(): Output[`resourceQuery`];
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setResourceQuery(query: Options['resourceQuery']): this;
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude(): Array<string | RegExp>;
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(excludes: Options['exclude'] | ((excludes: Options['exclude']) => Options['exclude'])): this;
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType(): string;
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type: Options[`type`]): this;
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator(): {
        [index: string]: any;
    };
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator: Interface['generator']): this;
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Bud}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack(): Output;
}
export { Rule };
//# sourceMappingURL=index.d.ts.map