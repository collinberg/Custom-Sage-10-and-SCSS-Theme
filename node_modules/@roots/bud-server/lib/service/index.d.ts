import type { Bud } from '@roots/bud-framework/bud';
import { Service } from '@roots/bud-framework/service';
import type { Connection, Middleware, Service as BaseService } from '@roots/bud-framework/services/server';
import type { Watcher } from '@roots/bud-server/server/watcher';
/**
 * Server service class
 */
export declare class Server extends Service implements BaseService {
    /**
     * Express instance
     *
     * @public
     */
    application: Express.Application & {
        set: any;
        use: any;
    };
    /**
     * Watcher instance
     *
     * @public
     */
    watcher: Watcher;
    /**
     * Server connections
     * @public
     */
    connection: Connection;
    /**
     * Available middleware
     * @public
     */
    availableMiddleware: {
        proxy: string;
        cookie: string;
        hot: string;
        dev: string;
    };
    /**
     * Utilized middleware
     * @public
     */
    get enabledMiddleware(): BaseService['enabledMiddleware'];
    /**
     * Applied middleware
     * @public
     */
    appliedMiddleware: Partial<Record<keyof Middleware.Available, any>>;
    /**
     * Development server URL
     */
    get url(): URL;
    /**
     * External development server URL
     */
    get publicUrl(): URL;
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    register?(bud: Bud): Promise<void>;
    /**
     * Set connection
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    setConnection(bud: Bud): Promise<void>;
    /**
     * Inject scripts
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    injectScripts(): Promise<void>;
    /**
     * Apply middleware
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    applyMiddleware(): Promise<void>;
    /**
     * Run development server
     *
     * @public
     * @decorator `@bind`
     */
    run(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map