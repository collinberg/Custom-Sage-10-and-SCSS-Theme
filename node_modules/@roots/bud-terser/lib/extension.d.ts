import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { Plugin } from '@roots/bud-support/terser-webpack-plugin';
/**
 * `terser-webpack-plugin` options
 */
export type Options = Plugin.BasePluginOptions & {
    minify?: Plugin.MinimizerImplementation<any>;
    include: RegExp;
    exclude: RegExp;
    extractComments: boolean;
    parallel: boolean;
    terserOptions?: Plugin.MinimizerOptions<any>;
};
/**
 * Terser extension
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 * @decorator `@options`
 * @decorator `@disabled`
 */
export declare class BudTerser extends Extension<Options> {
    /**
     * Terser options getter/setter
     */
    get terserOptions(): Options['terserOptions'];
    set terserOptions(terserOptions: Options['terserOptions']);
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    buildBefore(bud: Bud): Promise<void>;
    /**
     * Set minify implementation
     *
     * @public
     * @decorator `@bind`
     */
    setMinifier(minify: any): this;
    /**
     * Drop console
     *
     * @public
     * @decorator `@bind`
     */
    dropConsole(enable?: boolean): this;
    /**
     * Drop comments
     *
     * @public
     * @decorator `@bind`
     */
    dropComments(enable?: boolean): this;
    /**
     * Output comments
     *
     * @public
     * @decorator `@bind`
     */
    comments(comments?: boolean): this;
    /**
     * Output debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    debugger(enable?: boolean): this;
    /**
     * Drop debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    dropDebugger(enable?: boolean): this;
    /**
     * Mangle output
     *
     * @public
     * @decorator `@bind`
     */
    mangle(mangle: Options['terserOptions']['mangle']): this;
}
//# sourceMappingURL=extension.d.ts.map