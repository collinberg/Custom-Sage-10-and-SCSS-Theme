import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework';
import { bind, label, options, plugin, } from '@roots/bud-framework/extension/decorators';
import webpack from '@roots/bud-support/webpack';
/**
 * `@roots/bud-extensions/webpack-provide-plugin` adapter
 *
 * @public
 * @decorator `@label`
 * @decorator `@plugin`
 */
let BudProvide = class BudProvide extends Extension {
    /**
     * `when` callback
     *
     * @remarks
     * Returns `true` when `options` are defined
     *
     * @public
     * @decorator `@bind`
     */
    async when() {
        return this.options && Object.keys(this.options).length > 0;
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudProvide.prototype, "when", null);
BudProvide = __decorate([
    label(`@roots/bud-extensions/webpack-provide-plugin`),
    plugin(webpack.ProvidePlugin),
    options({})
], BudProvide);
export default BudProvide;
//# sourceMappingURL=index.js.map