import type { Bud, Loaders } from '@roots/bud-framework';
import type * as Build from '@roots/bud-framework/services/build';
import { Loader } from '../loader/index.js';
import Base from '../shared/base.js';
export type ConstructorOptions = Build.Item.ConstructorOptions;
/**
 * Item class
 */
declare class Item extends Base implements Build.Item {
    _app: () => Bud;
    /**
     * Identifier
     * @public
     */
    ident: string;
    /**
     * Loader
     *
     * @public
     */
    loader: Loader | `${keyof Loaders & string}`;
    /**
     * Loader options
     *
     * @public
     */
    options: Build.Item['options'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Bud, constructorParams?: {
        ident?: string;
        loader?: Loader | `${keyof Loaders & string}`;
        options?: Item['options'];
    });
    getIdent(): Build.Item['ident'];
    setIdent(ident: Build.Item['ident']): this;
    /**
     * Get rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    getLoader(): Loader;
    /**
     * Set rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(loader: Loader | `${keyof Loaders & string}`): this;
    /**
     * Get rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions(): Item['options'];
    /**
     * Set rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    setOptions(options: Item['options']): this;
    /**
     * Merge rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options: Build.Item.Options): this;
    /**
     * Produce rule set item object for Webpack
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack(): Build.Item.Output;
}
export { Item };
//# sourceMappingURL=index.d.ts.map