import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, disabled, expose, label, options, } from '@roots/bud-framework/extension/decorators';
/**
 * Terser extension
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 * @decorator `@options`
 * @decorator `@disabled`
 */
let BudTerser = class BudTerser extends Extension {
    /**
     * Terser options getter/setter
     */
    get terserOptions() {
        return this.getOption(`terserOptions`) ?? {};
    }
    set terserOptions(terserOptions) {
        this.setOption(`terserOptions`, terserOptions);
    }
    /**
     * `buildBefore` callback
     *
     * @public
     * @decorator `@bind`
     */
    async buildBefore(bud) {
        const terser = await this.import(`terser-webpack-plugin`);
        if (!terser)
            return;
        if (this.disabled)
            return;
        if (bud.extensions.has(
        // @ts-ignore
        `@roots/bud-swc`)) {
            const { swcMinify } = await this.import(`terser-webpack-plugin`);
            this.setMinifier(swcMinify);
        }
        bud.hooks.on(`build.optimization.minimizer`, (minimizers = []) => {
            this.logger.log(`current minimizers:`, minimizers);
            const terserMinimizerInstance = new terser(this.options);
            this.logger.log(`registering terser`, terserMinimizerInstance);
            this.logger.log(`with options`, this.options);
            minimizers.push(terserMinimizerInstance);
            this.logger.success(`terser added to minimizers`, minimizers);
            return minimizers;
        });
    }
    /**
     * Set minify implementation
     *
     * @public
     * @decorator `@bind`
     */
    setMinifier(minify) {
        this.terserOptions = { ...this.terserOptions, minify };
        return this;
    }
    /**
     * Drop console
     *
     * @public
     * @decorator `@bind`
     */
    dropConsole(enable = true) {
        this.terserOptions = {
            ...this.terserOptions,
            compress: {
                ...(this.terserOptions.compress ?? {}),
                drop_console: enable,
            },
        };
        return this;
    }
    /**
     * Drop comments
     *
     * @public
     * @decorator `@bind`
     */
    dropComments(enable = true) {
        this.comments(enable === false);
        return this;
    }
    /**
     * Output comments
     *
     * @public
     * @decorator `@bind`
     */
    comments(comments = true) {
        this.terserOptions = {
            ...this.terserOptions,
            output: {
                ...(this.terserOptions.output ?? {}),
                comments,
            },
        };
        return this;
    }
    /**
     * Output debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    debugger(enable = true) {
        this.terserOptions = {
            ...this.terserOptions,
            output: {
                ...(this.terserOptions.output ?? {}),
                debugger: enable,
            },
        };
        return this;
    }
    /**
     * Drop debugger statements
     *
     * @public
     * @decorator `@bind`
     */
    dropDebugger(enable = true) {
        this.debugger(enable === false);
        return this;
    }
    /**
     * Mangle output
     *
     * @public
     * @decorator `@bind`
     */
    mangle(mangle) {
        this.terserOptions = {
            ...this.terserOptions,
            mangle,
        };
        return this;
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudTerser.prototype, "buildBefore", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "setMinifier", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropConsole", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropComments", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "comments", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "debugger", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "dropDebugger", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudTerser.prototype, "mangle", null);
BudTerser = __decorate([
    label(`@roots/bud-terser`),
    dependsOn([`@roots/bud-terser/css-minimizer`]),
    expose(`terser`),
    options({
        include: ({ hooks }) => hooks.filter(`pattern.js`),
        exclude: ({ hooks }) => hooks.filter(`pattern.modules`),
        extractComments: false,
        parallel: true,
        terserOptions: {
            compress: false,
            mangle: {
                safari10: true,
            },
            output: {
                comments: false,
                ascii_only: true,
            },
        },
    }),
    disabled
], BudTerser);
export { BudTerser };
//# sourceMappingURL=extension.js.map