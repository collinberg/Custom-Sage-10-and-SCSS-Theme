import { isAbsolute } from 'node:path';
import * as isType from './isType.js';
import * as validate from './validate.js';
/**
 * Set a project path.
 *
 * @remarks
 * All values should be relative to the project directory.
 *
 * @example
 * Set project path
 * ```js
 * bud.setPath('/app/absolute/path/')
 * ```
 *
 * @example
 * ```js
 * bud.setPath('@src', 'custom/src')
 * ```
 */
export const setPath = function (...parameters) {
    /* Validate parameters */
    parameters = validate.all(parameters);
    /* Set basedir */
    if (isType.baseDir(parameters)) {
        const basedir = validate.baseDir(parameters);
        this.context.basedir = basedir;
        this.log(`basedir set to ${basedir}`);
        return this;
    }
    /* Setter */
    const setHookValue = makeCallback(this);
    /* Set path from key, value */
    if (isType.stringPair(parameters)) {
        setHookValue(parameters);
        return this;
    }
    /* Set multiple paths */
    if (isType.pathMap(parameters)) {
        Object.entries(parameters[0]).map(setHookValue);
        return this;
    }
    const error = new Error(`Invalid parameters passed.\n\nDocs: https://bud.js.org/docs/bud.setPath`);
    error.name = `bud.setPath`;
    throw error;
};
/**
 * Make {@link Bud.hooks} callback
 */
const makeCallback = (bud) => (pair) => {
    const [key, value] = validate.stringPair(pair);
    const normal = !isAbsolute(value) ? bud.relPath(value) : value;
    bud.log({
        key,
        value,
        normal,
    });
    bud.hooks
        .on(`location.${key}`, normal)
        .log(`${key} set to ${normal}`);
    return bud;
};
//# sourceMappingURL=setPath.js.map