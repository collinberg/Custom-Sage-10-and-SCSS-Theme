import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { Plugin, Processor } from 'postcss';
type Input = string | Plugin | Processor | [string | Plugin | Processor, any?];
type InputList = Array<string | [string, any?]>;
type InputRecords = Record<string, Input>;
type InputMap = Map<string, Input>;
type Registry = Map<string, [string | Plugin | Processor, any?]>;
/**
 * PostCSS support extension for `@roots/bud`
 *
 * @public
 * @decorator `@expose`
 * @decorator `@label`
 */
export declare class BudPostCss extends Extension {
    /**
     * Syntax
     *
     * @public
     */
    protected _syntax: string;
    /**
     * Source map
     *
     * @public
     */
    protected _sourceMap: boolean;
    /**
     * Plugins registry
     *
     * @public
     */
    protected readonly _plugins: Registry;
    /**
     * Extension registration
     *
     * @public
     * @decorator `@bind`
     */
    register(app: Bud): Promise<void>;
    /**
     * postcss-loader `postcssOptions` accessor
     *
     * @public
     */
    protected get postcssOptions(): {
        plugins: any[];
        syntax?: string;
    };
    /**
     * postcss-loader's `postcssOptions.syntax` accessor
     *
     * @public
     */
    get syntax(): string;
    set syntax(syntax: string);
    /**
     * Get postcss-loader's `syntax` option
     *
     * @public
     */
    getSyntax(): string;
    /**
     * Set postcss-loader's `syntax` option
     *
     * @public
     */
    setSyntax(syntax: string): this;
    /**
     * postcss-loader's source-map option accessor
     *
     * @public
     */
    get sourceMap(): boolean;
    set sourceMap(sourceMap: boolean);
    /**
     * Get postcss-loader's source-map option
     *
     * @public
     */
    getSourceMap(): boolean;
    /**
     * Set postcss-loader's source-map option
     *
     * @public
     */
    setSourceMap(sourceMap: boolean): this;
    /**
     * PostCss plugins accessor
     *
     * @public
     */
    get plugins(): Registry;
    /**
     * Get plugins
     *
     * @public
     * @decorator `@bind`
     */
    getPlugins(): Registry;
    /**
     * Sets all plugins
     *
     * @param plugins - Map or keyed object
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind`
     */
    setPlugins(plugins: InputRecords | InputMap | InputList): this;
    /**
     * Set a plugin
     *
     * @param name - plugin handle
     * @param plugin - the plugin object or a tuple of plugin and options
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind`
     */
    setPlugin(name: string, plugin?: Input): this;
    /**
     * Remove a plugin
     *
     * @param plugin - handle of plugin to remove
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind`
     */
    unsetPlugin(plugin: string): this;
    /**
     * Get plugin options
     *
     * @param plugin - handle of plugin to modify options of
     * @returns the plugin options
     *
     * @public
     * @decorator `@bind`
     */
    getPluginOptions(plugin: string): Record<string, any>;
    /**
     * Override options on a plugin
     *
     * @param plugin - handle of plugin to modify options of
     * @param options - the options to set
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind`
     */
    setPluginOptions(plugin: string, options: Record<string, any> | ((options: Record<string, any>) => Record<string, any>)): this;
    /**
     * Get plugin path
     *
     * @param plugin - handle of plugin to modify options of
     * @returns the plugin path
     *
     * @public
     * @decorator `@bind`
     */
    getPluginPath(plugin: string): string;
    /**
     * Set plugin path
     *
     * @public
     * @decorator `@bind`
     */
    setPluginPath(plugin: string, path: string): this;
}
export {};
//# sourceMappingURL=extension.d.ts.map