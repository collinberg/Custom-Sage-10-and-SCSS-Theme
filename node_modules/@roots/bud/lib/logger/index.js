import { __decorate, __metadata } from "tslib";
import commonPath from '@roots/bud-support/common-path';
import { bind } from '@roots/bud-support/decorators';
import { resolve } from '@roots/bud-support/import-meta-resolve';
import prettyFormat from '@roots/bud-support/pretty-format';
import Signale from '@roots/bud-support/signale';
import * as argv from '../context/argv.js';
import * as defaults from './options.js';
export class Logger {
    constructor(options = {}) {
        this.commonPath = ``;
        options = { ...defaults, ...options };
        if (argv.has(`no-log`))
            options.disabled = true;
        if (argv.has(`log`))
            options.logLevel = `log`;
        if (argv.has(`verbose`))
            options.logLevel = `info`;
        if (!argv.has(`log`) && !argv.has(`no-log`))
            options.logLevel = `warn`;
        this.instance = new Signale(options);
    }
    make(...scope) {
        const logger = new Logger().scope(...scope);
        return logger;
    }
    async setCommonPath(path) {
        const sharedModulePath = await resolve(`webpack`, import.meta.url);
        this.commonPath = commonPath([path, sharedModulePath]).commonDir;
        return this;
    }
    /**
     * Format logger messages
     *
     * @param messages - any
     * @public
     * @decorator `@bind`
     */
    format(...messages) {
        return messages.map(message => {
            if (typeof message !== `string`) {
                try {
                    return prettyFormat(message, {
                        highlight: false,
                        maxDepth: 3,
                        printFunctionName: false,
                        printBasicPrototype: false,
                    });
                }
                catch (e) {
                    return message;
                }
            }
            return message
                .replaceAll(/file:\/\//g, ``)
                .replaceAll(new RegExp(this.commonPath, `g`), ``);
        });
    }
    log(...messages) {
        this.instance.log(...this.format(...messages));
        return this;
    }
    time(label) {
        this.instance.time(label);
        return this;
    }
    timeEnd(label) {
        this.instance.timeEnd(label);
        return this;
    }
    success(...messages) {
        this.instance.success(...this.format(...messages));
        return this;
    }
    info(...messages) {
        if (!argv.has(`verbose`))
            return this;
        this.instance.info(...this.format(...messages));
        return this;
    }
    warn(...messages) {
        this.instance.warn(...this.format(...messages));
        return this;
    }
    error(...messages) {
        this.instance.error(...this.format(...messages));
        return this;
    }
    fatal(...messages) {
        this.instance.error(...this.format(...messages));
        return this;
    }
    debug(...messages) {
        if (!argv.has(`verbose`))
            return this;
        this.instance.debug(...this.format(...messages));
        return this;
    }
    fav(...messages) {
        this.instance.fav(...this.format(...messages));
        return this;
    }
    pending(...messages) {
        this.instance.pending(...this.format(...messages));
        return this;
    }
    star(...messages) {
        this.instance.star(...this.format(...messages));
        return this;
    }
    await(...messages) {
        this.instance.await(...this.format(...messages));
        return this;
    }
    scope(...scopes) {
        this.instance = this.instance.scope(...scopes);
        return this;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "make", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Logger.prototype, "setCommonPath", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "format", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "log", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "time", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "timeEnd", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "success", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "info", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "warn", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "error", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "fatal", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "debug", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "fav", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "pending", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "star", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "await", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "scope", null);
//# sourceMappingURL=index.js.map