import { Bud } from '@roots/bud';
import getContext from '@roots/bud/context';
import { get, has, set } from '@roots/bud/instances';
import * as argv from '../context/argv.js';
/**
 * Create a {@link Bud} instance programatically
 *
 * @example
 * ```ts
 * const bud = await factory()
 * ```
 *
 * @example
 * Running in a particular mode
 *
 * ```ts
 * const bud = await factory({mode: 'development'})
 * ```
 *
 * @returns Bud instance
 */
export async function factory(overrides = {}, options = { cache: true, find: false }) {
    if (!overrides.basedir)
        overrides.basedir = argv.basedir;
    if (!overrides.mode)
        overrides.mode = `production`;
    if (options.cache && has(overrides.basedir))
        return get(overrides.basedir);
    const bud = new Bud();
    const context = await getContext(overrides, options);
    if (options.cache) {
        set(context.basedir, bud);
        return await get(context.basedir).lifecycle(context);
    }
    return await bud.lifecycle(context);
}
//# sourceMappingURL=factory.js.map