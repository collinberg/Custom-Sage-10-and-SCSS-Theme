import { relative } from 'node:path/posix';
import figures from '@roots/bud-support/figures';
import Ink from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
import Chunk from '../chunk/chunk.component.js';
import ChunkGroup from '../chunk/chunkgroup.component.js';
import Space from '../display/space.component.js';
import Title from '../display/title.component.js';
import { color, colorFromStats, duration, longestAssetNameLength, VERT, } from '../format.js';
import Messages from '../messages/messages.component.js';
const onlyNotHot = ({ name }) => !name?.includes(`hot-update`);
const onlyStatic = ({ info }) => info?.copied;
const makeAssetGroupCallback = (assets) => (asset) => {
    const assetModule = assets?.find(a => a?.name === asset?.name);
    return { ...(asset ?? {}), ...(assetModule ?? {}) };
};
const Compilation = ({ displayAssets, displayEntrypoints, compilation, context, }) => {
    if (!compilation)
        return null;
    const groupAssets = makeAssetGroupCallback(compilation.assets);
    const entrypoints = Object.values(compilation.entrypoints)
        .filter(Boolean)
        .map(entrypoint => ({
        ...entrypoint,
        assets: entrypoint.assets.map(groupAssets),
    }));
    const assets = compilation.assets
        .filter(onlyNotHot)
        .filter(onlyStatic)
        .filter(Boolean)
        .map(groupAssets);
    const truncatedAssets = assets.splice(5);
    const longestEntrypointAssetLength = entrypoints.reduce((longest, entry) => Math.max(longestAssetNameLength(entry.assets), longest), 0);
    return (React.createElement(Ink.Box, { flexDirection: "column" },
        React.createElement(Ink.Box, { flexDirection: "row" },
            React.createElement(Ink.Text, { color: colorFromStats(compilation) }, compilation.errorsCount > 0
                ? figures.cross
                : figures.circleFilled),
            React.createElement(Ink.Text, null, `  `),
            React.createElement(Ink.Text, null, compilation.name),
            React.createElement(Ink.Text, null,
                " ",
                ``),
            compilation.outputPath && (React.createElement(Ink.Text, { color: color.blue },
                "./",
                relative(context.basedir, compilation.outputPath))),
            React.createElement(Ink.Text, null, ` `),
            React.createElement(Ink.Text, { dimColor: true },
                "[",
                compilation.hash,
                "]")),
        !compilation.isChild && (React.createElement(React.Fragment, null,
            React.createElement(Ink.Text, { dimColor: true }, VERT),
            React.createElement(Messages, { type: "error", color: color.red, messages: compilation.errors, figure: figures.cross }),
            React.createElement(Messages, { type: "warning", color: color.yellow, messages: compilation.warnings, figure: figures.warning }),
            React.createElement(Ink.Box, { flexDirection: "column" }, entrypoints.some(({ assets }) => assets?.length > 0) ? (React.createElement(Ink.Box, { flexDirection: "column" },
                React.createElement(Title, null,
                    React.createElement(Ink.Text, { color: colorFromStats(compilation), dimColor: displayEntrypoints === false },
                        React.createElement(Ink.Text, { underline: true }, "e"),
                        "ntrypoints")),
                displayEntrypoints
                    ? entrypoints
                        .filter(({ assets }) => assets.length > 0)
                        .map((chunk, id) => (React.createElement(Ink.Box, { key: id, flexDirection: "column" },
                        React.createElement(ChunkGroup, { indent: [true], ...chunk, minWidth: longestEntrypointAssetLength, final: id === entrypoints.length - 1 }))))
                    : null,
                React.createElement(Space, null,
                    React.createElement(Ink.Text, null, " ")))) : null),
            assets?.length > 0 ? (React.createElement(Ink.Box, { flexDirection: "column" },
                React.createElement(Title, null,
                    React.createElement(Ink.Text, { color: colorFromStats(compilation), dimColor: displayAssets === false },
                        React.createElement(Ink.Text, { underline: true }, "a"),
                        "ssets")),
                displayAssets ? (React.createElement(React.Fragment, null,
                    React.createElement(Chunk, { assets: assets, indent: [true] }),
                    React.createElement(Space, null,
                        React.createElement(Ink.Text, null, " ")),
                    truncatedAssets?.length > 0 && (React.createElement(Space, null,
                        React.createElement(Ink.Text, { dimColor: true },
                            ` `,
                            figures.ellipsis,
                            ` `,
                            truncatedAssets.length,
                            ` `,
                            "additional asset(s) not shown"))))) : null)) : null,
            React.createElement(Space, null,
                React.createElement(Ink.Text, null, " ")))),
        React.createElement(Title, { final: true },
            React.createElement(Ink.Text, { dimColor: true },
                "compiled ",
                compilation.modules?.length,
                " modules in",
                ` `,
                duration(compilation.time)))));
};
export default Compilation;
//# sourceMappingURL=compilation.component.js.map