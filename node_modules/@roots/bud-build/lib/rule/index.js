import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isString from '@roots/bud-support/lodash/isString';
import Base from '../shared/base.js';
/**
 * Bud Rule
 */
class Rule extends Base {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, options) {
        super(_app);
        this._app = _app;
        if (!options)
            return;
        this.setTest(options.test);
        this.setUse(options.use);
        this.setInclude(options.include);
        this.setExclude(options.exclude);
        this.setType(options.type);
        this.setParser(options.parser);
        this.setGenerator(options.generator);
    }
    /**
     * Test value
     *
     * @param app - Bud instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest() {
        return this.unwrap(this.test);
    }
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test) {
        this.test = test;
        return this;
    }
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser() {
        return this.unwrap(this.parser);
    }
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser) {
        this.parser = this.wrap(parser);
        return this;
    }
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse() {
        return this.use;
    }
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(use) {
        this.use = isFunction(use) ? use(this.getUse()) : use;
        return this;
    }
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude() {
        return this.include?.map(item => isFunction(item) ? item(this.app) : item);
    }
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(includes) {
        this.include = isFunction(includes) ? includes(this.include) : includes;
        return this;
    }
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getResourceQuery() {
        return this.resourceQuery;
    }
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setResourceQuery(query) {
        this.resourceQuery = query;
        return this;
    }
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude() {
        return this.exclude?.map(this.unwrap);
    }
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(excludes) {
        this.exclude = isFunction(excludes) ? excludes(this.exclude) : excludes;
        return this;
    }
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType() {
        return this.unwrap(this.type);
    }
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type) {
        this.type = type;
        return this;
    }
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator() {
        return this.unwrap(this.generator);
    }
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator) {
        this.generator = this.wrap(generator);
        return this;
    }
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Bud}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack() {
        const output = Object.entries({
            test: this.getTest(),
            type: this.getType(),
            parser: this.getParser(),
            generator: this.getGenerator(),
            use: this.getUse()
                ?.map(item => (isString(item) ? this.app.build.items[item] : item))
                .map(item => (`toWebpack` in item ? item.toWebpack() : item)),
            resourceQuery: this.getResourceQuery(),
            include: this.getInclude(),
            exclude: this.getExclude(),
        }).reduce((a, [k, v]) => {
            if (v === undefined)
                return a;
            return { ...a, [k]: v };
        }, {});
        this.app.info(output);
        return output;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Rule.prototype, "getTest", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setTest", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Rule.prototype, "getParser", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setParser", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Rule.prototype, "getUse", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setUse", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Rule.prototype, "getInclude", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setInclude", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Rule.prototype, "getResourceQuery", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setResourceQuery", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Rule.prototype, "getExclude", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setExclude", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], Rule.prototype, "getType", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setType", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Rule.prototype, "getGenerator", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Rule.prototype, "setGenerator", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Rule.prototype, "toWebpack", null);
export { Rule };
//# sourceMappingURL=index.js.map