import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Register `react-refresh-swc` transform with TSC compiler
 *
 * @remarks
 * Used when `@roots/bud-swc` is being used with babel loader
 * disabled
 *
 * @public
 * @decorator `@label`
 * @decorator `@development`
 */
let BudSWCRefresh = class BudSWCRefresh extends Extension {
    /**
     * `init` callback
     *
     * @public
     * @decorator `@bind`
     */
    async init(bud) {
        bud.hooks.action(`build.before`, this.registerTransform.bind(this));
    }
    /**
     * Register `react-refresh-swc` transform
     *
     * @public
     * @decorator `@bind`
     */
    async registerTransform() {
        this.logger.log(`Registering swc react-refresh transformer`);
        this.app.swc.setOptions(options => ({
            ...options,
            transform: {
                react: {
                    development: this.app.isDevelopment,
                    refresh: this.app.isDevelopment,
                },
            },
        }));
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudSWCRefresh.prototype, "init", null);
BudSWCRefresh = __decorate([
    label(`@roots/bud-react/swc-refresh`),
    development
], BudSWCRefresh);
export default BudSWCRefresh;
//# sourceMappingURL=extension.js.map